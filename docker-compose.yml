version: '3'
services:
  nginx:
    image: nginx:1.21-alpine
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./data/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./data/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./logs/nginx/:/var/log/nginx/
    depends_on:
      auth_api:
        condition: service_started
    networks:
      - common_network

# Сервис авторизации
  auth_api:
    container_name: auth_api
    build: ./backend/auth_service/src/
    env_file:
      - .env
    ports:
      - ${AUTH_API_PORT}:${AUTH_API_PORT}
      - ${AUTH_API_AUTHENTICATOR_PORT}:${AUTH_API_AUTHENTICATOR_PORT}
    depends_on:
      auth_postgres:
        condition: service_healthy
      auth_redis:
        condition: service_healthy
      kibana:
        condition: service_healthy
    networks:
      - common_network
      - auth_network

  auth_postgres:
    image: postgres:16-alpine
    container_name: auth_postgres
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${AUTH_POSTGRES_DBNAME}
      POSTGRES_USER: ${AUTH_POSTGRES_USER}
      POSTGRES_PASSWORD: ${AUTH_POSTGRES_PASSWORD}
    expose:
      - ${AUTH_POSTGRES_PORT}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $$AUTH_POSTGRES_DBNAME -U $$AUTH_POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - auth_network

  auth_redis:
    image: redis:latest
    container_name: auth_redis
    env_file:
      - .env
    expose:
      - ${AUTH_REDIS_PORT}
    volumes:
      - ./data/auth_service/redis:/usr/local/etc/redis
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 50
    networks:
      - auth_network

# Система логирования и трейсинга
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    env_file:
      - .env
    ports: 
      - ${JAEGER_UI_PORT}:${JAEGER_UI_PORT}
    expose:
      - ${JAEGER_HTTP_PORT}
    networks:
      - common_network

  kibana:
    image: kibana:8.10.2
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}
    ports:
      - ${KIBANA_PORT}:${KIBANA_PORT}
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: curl -s http://${KIBANA_HOST}:${KIBANA_PORT} >/dev/null || exit 1
      interval: 5s
      timeout: 5s
      retries: 50
    networks:
      - common_network
      - logging_network

  logstash:
    image: logstash:8.10.2
    container_name: logstash
    environment:
      XPACK_MONITORING_ENABLED: false
      ES_HOST: ${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}
    expose:
      - ${LOGSTASH_PORT}
    volumes:
      - ./data/logstash/logstash.conf:/config/logstash.conf:ro
      - ./logs/nginx/:/var/log/nginx/:ro
    command: logstash -f /config/logstash.conf
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - common_network
      - logging_network

  elasticsearch:
    image: elasticsearch:8.10.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    expose:
      - ${ELASTICSEARCH_PORT}
    healthcheck:
      test: curl -s http://${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT} >/dev/null || exit 1
      interval: 5s
      timeout: 5s
      retries: 50
    networks:
      - logging_network
  
networks:
  common_network:
    driver: bridge
  auth_network:
    external: false
  logging_network:
    external: false